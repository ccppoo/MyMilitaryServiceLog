https://www.youtube.com/playlist?list=PLBNdLLaRx_rIF3jAbhliedtfixePs5g2q

코드스피츠의 여러 강의 초반에 대부분 프로그래밍 공학의 기초적인 부분을 공통적으로 다뤄서

이 글은 꼭 정리하는 것이 좋다고 판단해서 쓴다.

 

-=-=-=-=-=-=-=-=-

 

코딩, 프로그래밍이 선구자이자 시초인 서양인의 관점, 철학을 이해하면 이해하기 편하다. 

 

합리주의 : ~를 위해 ~를 한다

상대주의 : A의 입장에서 B는 부모 클래스, C의 입장에서 B는 자식 클래스가 될수 있듯이 늘 상대적인 관점에서 파악해야한다.

절대적인 지식이 존재한다고 생각하면 안된다. 프로그래밍은 늘 변한다.

 

하지만, 늘 상대주의적인 관점을 가지면 협업이 힘들어진다.

이를 보완하기 위해서 모두가 동의하고 따르는 합의방안, 즉 합리주의적 관점을 갖고(혼동이 없게 이것만큼은 지키자) 코딩 컨벤션과 같은 규칙이 만들어진다.

그래서 프로그래밍은 합리주의와 상대주의의 상호 보완적인 관점에서 바라봐야한다.

 

 

구현패턴

★ 내 코드를 이렇게 설계한 이유를 다음 설명할 가치, 원칙, 패턴을 기반으로 말할 수 있어야한다★ - (켄트 벡)

 

1. 가치 : 이 집단이 공통으로 인식할 수 있는 가치 있는 것들!

1-(1) 의사소통 : 코드만 봐도 상대가 이해가능하도록 짜야한다.

└ 이렇게 짜면 팀원들이 이해할 수 있다.

1-(2) 단순함    : 알아보기 쉽게 코드를 작성한다.

└ 유지보수 용이하도록 

1-(3) 유연함   : 다양한 상황에 대응할 수 있도록

└ 확장성, 응집성을 위해서 

 

2. 원칙  : 모두가 지키는 원칙에서 벗어나는 현상을 쉽게 파악하기 위해

2-(1) 지역화    : 전역변수를 지양하고 지역변수 지향 

└ 전역변수인 것들은 나중에 충돌 가능성을 높인다

2-(2) 중복제거 : 중복이 될 이유가 없는 것들은 제거한다.

└ 나중에 같은 역할의 메서드가 중복되면 수정할 때 힘듦 

2-(3) 대칭성    : 프로그래머들은 인간이다, 인간의 심리적인 현상에 대해 거스르지마라

└ 흑백논리, 대칭성 : getter가 있으면 setter도 있다. 

 

3. 패턴  : 예전에 일어났던 일들은 반복적으로 일어난다. ( 예전부터 디버깅에 쓰이는 시간은 개발기간의 60%를 차지했다...)

3-(1) 개발론  : 함수지향, 객체지향, ...

└ 절대적 진리는 아니지만, 선대 개발자들이 반복적으로 실행한 뒤로 유지보수에 편리한다고 판단한 것들의 패턴화(이론화) 된 것들

3-(2) 설계론 : ~ 구조, ~기준의 분리

└ DB를 어떻게 할 것인가 **경험을 반복하면 진리가 된다** 

3-(3) 각종 적용되는 패턴 : 언어, 회사마다 갖고 있는 고유의 패턴

└ 메서드, 클래스 설계 (변수의 개수 줄이기, 등등)

 

위 모든 것들은 돈, 시간을 위해 정리된 것들이다.

가치, 원칙, 패턴으로 개발 철학을 다지자.

 

개발을 취미로 생각하지말아라, 산업으로 생각해라

 

*덧, IoT 시대가 본격적으로 도래하면 마이크로 프로세서 사용률 ↑, 기계어 개발은 계속 쓰일 수 있다. 멀리 있다고 생각하지마라

 

 

-=-=-=-=-=-=-=-

 

프로그램이 실행되는 과정

 

 

프로그램의 생애 주기

┌──────────────────────┐

1. Language Code - LINT (readable)

2. Machine Code - Complie (not-readable)

3. File

4. Load

5. Run - Run Time

6. Terminate

└──────────────────────┘ 

 

1. 사람이 작성하고 읽을 수 있는 텍스트 형태의 코드가 작성된다.

2. 컴파일 된 후 기계어로 변역된다.

3. 실행가능한 파일(예 : ***.exe)로 변환된다.

4. 파일을 실행할 때 메모리에 적재된다.

5. 메모리에 적재된 실행파일은 일련의 명령어로 변환되어 CPU에 차곡차곡 실행된다.

6. 모든 명령어가 소모된 후 프로그램이 종료된다.

 

런타임(Run Time)시 CPU와 메모리 작동방식 -  간략화

 

CPU

1. 제어유닛 (디코더) : CPU 명령어로 디코딩한 뒤 연산유닛으로 넘긴다

2. 연산유닛 (제어정보) : 연산처리를 하는 장소다

3. 데이터 유닛  : 메모리에서 가져온 데이터를 임시적으로 저장하고, 메모리와 직접적으로 주고 받는다.

4. 버스  : CPU와 메모리 간에 데이터를 정보를 주고 받고 추상적인 명령어를 CPU가 읽을 수 있는 명령어로 해석한다.

