2020/03/26 (목)

개발환경 : Chrome 개발자모드 - 콘솔
책 : 모던 자바스크립트 입문 - 이소 히로시

맨 처음 화면상에서 "this"를 입력하면 window가 뜬다.
즉 객체(Class)의 내부다.
자바와 동일하게 모든것은 객체에서 시작된다.
그래서 빈화면에서의 this는 전역객체이자 최상위 레벨 코드를 의미한다.
사실상 객체 위에서 코딩을 하는 것과 같다.

예를 들어 전역변수의 경우를 보면
a = 10 ;
this.a // -> 10

var b = 20 ;
this.b // -> 20
이 나온다.

이를 통해 JS는 커다란 객체 위에서 코딩을 하는 것과 같다고 볼 수 있다.

가끔은 내가 서 있는 공간, 작업하는 공간이 불변하고 베드락(Bed Rock)처럼 더 밑으로는 아무것도 없는, 또는 완전한
근본이며 Raw한 것이라는 생각이 들기 쉽다.
도커처럼 환경, IDE와 같이 하나의 프로그램 위에서 내가 프로그래밍을 할 수 있듯이
JS를 코딩 할 땐 내가 쓰는 객체라는 것 위에서 내가 또 객체를 만들며 프로그래밍을 한다는 것을 인지하고 있어야 유연한
사고가 가능할 듯 하다.

자, 다시 Hoisting 이야기로 들아오자.
실행 환경 또한 객체이기 때문에 객체의 요소들을 등록하는 렉시컬 환경 타입인 전역 환경(Lexical Environment
Type : Global Environment)의 객체 환경 레코드(Objective Environment Record)에
선언된 변수 (var, 전역변수)와 매소드를 등록 하고 순차적으로 실행하는 것이다.

그럼 파이썬과 비교를 해보자.
파이썬은 인터프리터 언어이므로 순차적으로 진행된다.
그리고 객체 위에서 프로그래밍이 되는 것이 아니다 (빈 화면에 self 치면 없음)
그래서 변수를 선언하기 전에 사용하면 Reference Error를 throw한다.
이와 달리 JS는 JIT(Just in Time)를 사용해서 C와 비슷하게 선언된 것들을 우선적으로 컴파일링하고, 인터프리팅을 한다.

콘솔창 대화모드(REPL)로 파이썬처럼 코딩(간단한거 테스트)이 가능하면서 Hoisting이 된다니 신기하다.

모든게 객체인(원시타입 外)인 JS에서의 큰 특징의 부산물의 효과인 "Hoisting 현상"을 Hoisting이라는 이름을 붙이다니!

...

아무래도 선언하는 변수들을 뒷부분에 박아놓고 맨 위에서부터 쓰면 이상하다.
그래서 책에서는 이렇게 "짜잔 뒤에 선언해놨단다"라는 식의 개발을 지양한다고 한다.
프로그래밍에 절차지향, 객체지향, 함수지향과 같이 서로 다른 패러다임이 있더라도
다른 개발자들이 읽기 편하도록 배려하는 프로그래밍이 난 더 좋다고 생각한다.


