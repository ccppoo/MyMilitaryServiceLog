캡슐화 - 무례아닌 배려

세상에 마법은 없다.
갑자기 종이에 그림이 움직이거나, 텔레파시를 통해 멀리 있는 사람들가 대화 할 수 없다.
대신 태블릿 PC, 스마트 폰 전화가 존재한다.
태블릿 PC를 사용하는데 작동 원리를 알아야 사용할 수 있는 것은 아니며,
무선 통신의 원리와 암호화,복호화 관정을 알아야 전화를 할 수 있는 것 또한 아니다.
단지 중간 과정에서 에러가 발생한다면, 기계가 자체적으로 에러가 났으니 "A/S 맡겨주세요", "핸드폰 재시작 해주세요" 같이
일반인들이 알아들을 수 있게 알려준다.
만약 이런 메세지 없이 코드만 보여준다면 집어 던질 것이 뻔하다.

사용자가 원하는 건 돌아가는 원리가 아니라 핸드폰 베터리가 얼마나 남았는지, 전화가 왔는지, 카톡이 왔는지만 알려주는 것이다.

이처럼 사용자(개발자)가 원하는 것만 보여주는 것이 캡슐화다.
사용자는 코드를 작성한 뒤 일주일이 지난 나 자신 또한 포함된다.
또는 임의의 데이터를 조작해서 오작동이 나지 않도록 못만지게 숨겨두는 것 또한 캡슐화다.
캡슐화는 배려와 동시에 안정성을 추구하는 개념이라고 볼 수 있다.


객체 설계에서 캡슐화는 사용자들의 잘못된 행동으로 오작동 되는 것을 막아주고, 사용자들이 기억할 것을 줄여준다.
너무 많은 정보는 사용자의 불안감과 불만을 만들어 낸다.
객체 내부에 어떤 인스턴스가 있고, 어떤 메서드가 있는지 다 알려줄 필요가 없다.
알고 싶으면 직접 소스코드를 뜯으면 된다. 물론 거의 소수의 사람들만.

객체는 객체가 가지고 있을법한 필드와 메서드만 존재하면 훌룡하다(추상성).
학생 객체가 "출근"이라는 메서드를 지닐 필요가 없다는 것이다.

사용자를 바보라고 생각하고, 최소한의 동작으로 원하는 결과를 낼 수 있도록 만든 객체가 좋은 설계이자 사용자에 대한 배려다.
