객체는 과자를 찍어내는 틀? - 과자라는 이미지, 추상적인 개념 예시의 실패사례

객체지향을 처음 접한 건 학부 1학년 중순, 파이썬을 시작하고 나서부터였다.
파이썬을 처음 접하게 된 경험은 기억이 안 나지만, 처음으로 객체라는 것을 하나의 자료관리용 데이터 덩어리로 많이 사용했다.
C#이나 JavaScript에서 name scpace를 구분해서 코드를 편리하게 구분하듯이, self.를 namespace처럼
편리하게 사용한 기억이 있다.
그 뒤로 호기심에 C++을 접했으며, 운이 좋아 "이것이 C++이다"를 통해 C++과 동시에 객체지향의 특성에 대해 공부할 수 있었다.

이 모든 걸 객체는 "과자를 찍어내는 틀"이라고 표현하는 수업을 듣기전에 배워둬서 참 다행이라고 생각한다.
위 표현은 객체의 추상성을 설명하는데 아주 부적합한 예시다.
우선 무언가를 설명을 할 땐 단지 서로 알고만 있는 내용이 아닌, 모호성이 없는 개념에 대한 합의가 존재해야 한다.
과학계에서는 원자량과 힘의 단위에 대해 정의를 내리고 그것에 대한 의문을 제기하지 않듯이, 객체 또한 이렇게 진행되었어야 한다.
하지만 교육자라는 사람들이, 그것도 책을 양산하는 분이 객체를 "과자를 찍어내는 틀"이라고 부르는 것이 잘못되었다.
과자를 찍어내는 틀이라 하면 객체의 인스턴스는 과자, 그리고 틀은 스테인레스 철로 만든 것으로써 불변한다는 느낌이 존재한다.
그리고 찍어낸 과자 반죽을 구워서 먹는 것 말고 뭐가 더 있는가?
틀은 "똑같은" 과자를 찍어내는 것외에 다른 용도로 쓰이는가?
틀을 찌그러트려서 다른 모양으로 만드는가?
단세포적인 생각과 접근법이라면 단지 여러 인스턴스를 만들 수 있다는 것을 표현한 것이라면 조금이나마 이해가 간다.
하지만 객체를 가르치면서 동시에 상속, 클로저, 추상 클래스, 등등 여러 파생적인 개념도 소개하는 건 너무 생각없이 비유를 든 것 같다.

'과자' 설명을 처음 들었을 당시,
"과자를 만들고, 굽고, 먹는거 말고 뭐?
그럼 다음 장에서 배우는 상속이랑 인스턴스, 필드 값은 과자의 뭐에 해당되는 건데?
당신은 과자 틀 하나 사서 다른 용도로 쓴 적 있어?" 라는 불만을 계속 했었다.

추상적인 것을 설명하는데에 있어 상당히 조심해야하고 최대한 근본적인 모든 사람이 똑같은 개념을 가지고 있는 것에 대해 비유를
할 수 있도록 해야한다.
누구나 똑같은 과자를 만들고, 똑같은 과자 틀을 들고, 똑같은 발상을 할 확률은 매우 낮다.
위의 '과자' 예시를 들어본 학생들 중 실제로 과자를 구워보지도 못한 학생들도 있을텐데, 저자 본인은 직접 구워본적이 있을까?

프로그래머의 경우 다른 언어간 보편적 지식, 포멧 차이나 코딩스타일이 다른 경우가 이에 해당 되겠다(무조건 함수 정의 해서
사용 vs 람다식 사용).


