2,3,4장 주제가 책처럼 코드를 보여주면서 설명해야 이해가 가능한 장이라고 생각한다.
글로 표현하기 진짜 추상적인 주제다. 그래서인지 머릿속의 그 추상적인 개념을 사전처럼 정리해서 내놓기 참 힘들었다.
그래서 시간이 1,2장에 비해 좀 오래걸렸다.
더군더나 야간근무를 하며 쓴 거라 내용이 두서없고 난해하다...

==========================

프로그래밍을 하기 전 글을 계획서를 쓴다거나, 무언가를 만든다고 생각하자.
덜 햇갈리도록, 조금 더 이해하기 쉽게 레고(Lego)로 건물을 짓는 상황을 생각해보자.
현실적인 건물에서 그 발상이 시작되기 때문에 실물의 특성을 모방하게 될 것이다.
1층에는 건물의 문과 창문, 입구 옆에 장식되어 있는 조형물과 수풀이 떠오른다.
아파트가 아닌 일반 도시 건물의 경우 2~3m의 이쁜 문이 존재하고, 탁 트인 창문으로 건물의 1층 내부가 보인다.
그리고 2~3층부터는 창문과 벽으로 이루어진 구조가 반복된다.
솔직히 레고 건물 패키지를 사서 조립도를 따라 만드는게 아니면 기존에 있는 건물을 따라 만드는 경우가 많다.
요리조리 조립하다가 이쁜 모양이 나오면 이어 짓거나, 정 안되면 조립도, 또 안되면 블로그에서 이쁜 완성품을 따라 만드는 경우가 많다.
마찬가지로 프로그래밍도 있을 법한 "실체", 즉 데이터를 먼저 떠올린 후 그것을 활용하는 순서와 내가 만드는 프로그램에 맞춰 추가 및 수정하는 방식이 당연하다.

프로그램이을 할 때 반사적으로 필요한 자료형과 변수를 먼저 써놓고 클래스를 작성하는 경우는 없다.
당연히 자료형을 작성하기 전에 "아 http get을 쓸거니깐 소켓 자료형을 담을 변수를 선언해야지" 정도는 생각한 뒤에 써놓는다.
마치 자동차를 만들기 위해서 먼저 엔진, 좌석, 운전대, 프레임, 등 당연히 있을 법한 준비물들을 미리 제조한 뒤 만드는 것과 유사하다.

많은 데이터 중심 설계(그동안 내가 했던)는 나 같은 초보자들이 쉽고 직관적으로 접할 수 있는 설계라고 생각한다.
프로그램의 유지보수성과 협업에 있어 잘못을 했다고 할 수 있다.
우선 프로그래밍을 처음 접했을 때 쌩 코드를 먼저 보거나, 이미 완성된 코드를 보고 배우는 경우가 많다.
내 경험을 바탕으로 말하자면, 처음 파이썬을 시작하고 크롤러를 만들 때 크롤러를 만드는 과정이 아닌 완성된 코드를 보고 거기서 어떤 라이브러리 패키지가 어떻게 이용되고, 어떤 클래스가 어떻게 이용되는지 먼저 배웠다.
그렇다보니 다른 사람의 코드를 보고 배끼다보면 우선 필요한 준비물들이 뭔지, 그리고 그것들을 어떻게 사용하는지를 배우는 것이 최우선 목표가 된다.
배끼고 따라하는 건 여러 학습의 방법 중 하나기 때문에 전혀 나쁠 것이 없다.

도구를 어떻게 사용하는지 먼저 배우고 커다란 건물을 설계를 하는것과 같다.
보편적인 예시를 들면, 초보 요리사가 셰프 밑에서 허드렛일부터 시작하면서 사소한 것들을 익힌 뒤, "진짜" 기술을 배우는 것과 같다.

주방장이 초보 요리사에게 설거지를 왜 하는지, 기본 재료를 왜 이렇게 다져놓는지, 등 세부적인 이유와 깊은 뜻에 대해 알려주지 않는다.

일단 외워! 일단 외우고 시작해! 같은 공부법이 프로그래밍에 있어 적합한 공부법같다.
객체지향같은 설계는 나중에 하는 거고...
프로그래밍에 있어 "일단 만들어 봐라"가 된 것이다. 다만 셰프 없이도 혼자 학습이 가능하다는 것이다.
어떤 자료형, 어떤 구조가 "왜"이런지 먼저 고민하거나 생각할 틈 없이 일단 프로젝트를 시작할 때 클래스에 넣고 보는 것이다.
그리고 그 이유와 깊은 뜻을 나중에 생각하는 경우가 다반사다.
이러다보니 의도된 것은 아니지만, 데이터 중심 설계가 절차지향과 같다고 볼 수 있으니, 괜히 C언어와 절차지향 프로그래밍이 먼저 나온 것이 아니다.

...

객체를 처음 배울 때 객체를 단지 여러 데이터와 메서드를 함께 포함시킬 수 있는 하나의 자료형만으로 배웠다.
그렇게 처음 배울 대 객체를 협력의 상징이라고 깨달을 수 있을까.
객체를 처음 배우고 단지 데이터를 private 선언 후 getter와 setter를 만들어 놓고 은닉화라고 한 교수가 생각난다.
말이 은닉이지 정작 밖에서 보고, 조작할 수 있는데 뭔 짓거리인가 싶어 그 뒤로  public으로 선언했다.
처음에는 public으로 모두 선언하는 것에 익숙해 있다가, 에디터의 자동완성으로 너무 많은게 떠서 의도치 않게 은닉화를 했다.
이렇게 단지 객체 내부에서만 쓰이는 것들을 은닉화하는 정도로만 응용했다.
무엇보다 혼자하는 작업이 대다수였기 때문에 변수나 메서드 이름에서 내부 구조를 다 알수 있겠끔 이름을 지었다 (노골적인 변수, 인터페이스 이름 -> 은닉화 x)

나중에 추상화에 대해 스스로 고민한 경험은 내가 twitchAnalytics 프로젝트를 작업했을 때였다.
트위치 채팅 서버에 연결에 DB에 직접 저장하는 모듈을 만들고, 24시간 계속 돌아갈 수 있게끔 만드느라 모든 모듈을 매일 매일 다루기 힘든 때였다.
그 때 처음으로 "내일의 나"를 위해 객체의 이름에 걸맞는 메서드와 데이터만 담는 것에 습관을 들인 것 같다.
하지만 객체 내부의 반복적인 작업을 단지 for문으로 작성하고, 메서드의 덩치가 매우 커서 사실상 껍데기만 메서드지 그냥 C언어의 Main과 비슷했다.
